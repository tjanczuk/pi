#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var wsApp = require('../wsApp');
var debug = require('debug')('server:server');
var http = require('http');
var Ws = require('ws');
const Relay = require('../relay');
const spawn = require('child_process').spawn;
const Path = require('path');
const Superagent = require('superagent');

debug('Starting with Node.js', process.version);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);


/**
 * Establish a tunnel and register it with a Fusebit function so that it can communicate back to Pi
 */

async function restartTunnel() {
  let ngrok = spawn(Path.join(__dirname, '..', 'ngrok'), ['http', port], { detached: false });
  process.once('exit', () => {
    ngrok && ngrok.kill();
    ngrok = undefined;
  });
  ngrok.on('close', (code) => {
    if (!ngrok) return;
    ngrok = undefined;
    debug(`Ngrok terminated with status code ${code}`);
    if (code === 0) {
      restartTunnel();
    }
    else {
      throw new Error(`Ngrok terminated with error code ${code}`);
      process.exit(1);
    }
  });
  debug(`Ngrok started`);
  setTimeout(async () => {
    let tunnelUrl;
    try {
      const response = await Superagent.get('http://127.0.0.1:4040/api/tunnels');
      for (var i = 0; i < response.body.tunnels.length; i++) {
        if (response.body.tunnels[i].proto === 'http') {
          tunnelUrl = response.body.tunnels[i].public_url;
          break;
        }
      }
      if (!tunnelUrl) {
        throw new Error(`No Ngrok tunnel URLs available.`);
      }
      debug(`Ngrok tunnel established: ${tunnelUrl}`)
    }
    catch (e) {
      debug(`Unable to obtain Ngrok tunnel URL: ${e.message}`);
      process.exit(1);
    }
    try {
      await Relay.registerTunnel(tunnelUrl);
      debug(`Ngrok tunnel registered with the Fusebit function`);
    }
    catch (e) {
      debug(`Unable to register Ngrok tunnel URL with the Fusebit function: ${e.message}`);
      process.exit(1);
    }
  }, 1000);
  setTimeout(() => {
    if (ngrok) {
      debug('Terminating Ngrok to recreate the tunnel');
      ngrok.kill();
    }
  }, 15 * 60000).unref();
}
restartTunnel();

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Set up websocket endpoint
 */
let wss = new Ws.Server({ server, path: '/api/ws' });
wss.on('connection', wsApp);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
